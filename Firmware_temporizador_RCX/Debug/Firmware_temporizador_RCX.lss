
Firmware_temporizador_RCX.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000078  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  00000492  2**0
                  ALLOC, LOAD, DATA
  2 .comment      0000002f  00000000  00000000  00000492  2**0
                  CONTENTS, READONLY
  3 .stack.descriptors.hdr 0000000e  00000000  00000000  000004c1  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  000004cf  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000781  00000000  00000000  000004ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000003c6  00000000  00000000  00000c80  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000034b  00000000  00000000  00001046  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00001394  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000100  00000000  00000000  000013d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000090  00000000  00000000  000014d8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000020  00000000  00000000  00001568  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .text         00000002  00000388  00000388  0000047c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00001588  2**2
                  CONTENTS, READONLY, DEBUGGING
 14 .text.adc_setup 00000014  00000356  00000356  0000044a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.adc_read 00000010  0000036a  0000036a  0000045e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.main    000002de  00000078  00000078  0000016c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .data.counter_flag 00000002  00800070  0000039a  0000048e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 18 .bss.pin_vida_old 00000002  00800072  00800072  00000492  2**0
                  ALLOC
 19 .bss.pin_vida 00000002  00800074  00800074  00000492  2**0
                  ALLOC
 20 .bss.in_ignition 00000002  00800076  00800076  00000492  2**0
                  ALLOC
 21 .bss.read     00000002  00800078  00800078  00000492  2**0
                  ALLOC
 22 .bss.ignition_off 00000004  00800060  00800060  00000492  2**0
                  ALLOC
 23 .bss.ignition_on 00000004  00800064  00800064  00000492  2**0
                  ALLOC
 24 .data.timeout_off 00000002  0080007a  0000039c  00000490  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 25 .data.time_read_pin 00000004  00800068  00000392  00000486  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 26 .data.time_alive 00000004  0080006c  00000396  0000048a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 27 .text.__dummy_fini 00000002  0000038a  0000038a  0000047e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 28 .text.__dummy_funcs_on_exit 00000002  0000038c  0000038c  00000480  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 29 .text.__dummy_simulator_exit 00000002  0000038e  0000038e  00000482  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 30 .text.exit    0000000e  0000037a  0000037a  0000046e  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 31 .text._Exit   00000002  00000390  00000390  00000484  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	15 c0       	rjmp	.+42     	; 0x2c <__ctors_end>
   2:	c2 c1       	rjmp	.+900    	; 0x388 <__bad_interrupt>
   4:	c1 c1       	rjmp	.+898    	; 0x388 <__bad_interrupt>
   6:	c0 c1       	rjmp	.+896    	; 0x388 <__bad_interrupt>
   8:	bf c1       	rjmp	.+894    	; 0x388 <__bad_interrupt>
   a:	be c1       	rjmp	.+892    	; 0x388 <__bad_interrupt>
   c:	bd c1       	rjmp	.+890    	; 0x388 <__bad_interrupt>
   e:	bc c1       	rjmp	.+888    	; 0x388 <__bad_interrupt>
  10:	bb c1       	rjmp	.+886    	; 0x388 <__bad_interrupt>
  12:	ba c1       	rjmp	.+884    	; 0x388 <__bad_interrupt>

00000014 <.dinit>:
  14:	00 60       	ori	r16, 0x00	; 0
  16:	00 68       	ori	r16, 0x80	; 128
  18:	80 00       	.word	0x0080	; ????
  1a:	68 00       	.word	0x0068	; ????
  1c:	72 00       	.word	0x0072	; ????
  1e:	03 92       	.word	0x9203	; ????
  20:	00 72       	andi	r16, 0x20	; 32
  22:	00 7a       	andi	r16, 0xA0	; 160
  24:	80 00       	.word	0x0080	; ????
  26:	7a 00       	.word	0x007a	; ????
  28:	7c 00       	.word	0x007c	; ????
  2a:	03 9c       	mul	r0, r3

0000002c <__ctors_end>:
  2c:	11 24       	eor	r1, r1
  2e:	1f be       	out	0x3f, r1	; 63
  30:	cf e9       	ldi	r28, 0x9F	; 159
  32:	cd bf       	out	0x3d, r28	; 61

00000034 <__do_copy_data>:
  34:	e4 e1       	ldi	r30, 0x14	; 20
  36:	f0 e0       	ldi	r31, 0x00	; 0
  38:	40 e0       	ldi	r20, 0x00	; 0
  3a:	17 c0       	rjmp	.+46     	; 0x6a <__do_clear_bss+0x8>
  3c:	b5 91       	lpm	r27, Z+
  3e:	a5 91       	lpm	r26, Z+
  40:	35 91       	lpm	r19, Z+
  42:	25 91       	lpm	r18, Z+
  44:	05 91       	lpm	r16, Z+
  46:	07 fd       	sbrc	r16, 7
  48:	0c c0       	rjmp	.+24     	; 0x62 <__do_clear_bss>
  4a:	95 91       	lpm	r25, Z+
  4c:	85 91       	lpm	r24, Z+
  4e:	ef 01       	movw	r28, r30
  50:	f9 2f       	mov	r31, r25
  52:	e8 2f       	mov	r30, r24
  54:	05 90       	lpm	r0, Z+
  56:	0d 92       	st	X+, r0
  58:	a2 17       	cp	r26, r18
  5a:	b3 07       	cpc	r27, r19
  5c:	d9 f7       	brne	.-10     	; 0x54 <__DATA_REGION_LENGTH__+0x14>
  5e:	fe 01       	movw	r30, r28
  60:	04 c0       	rjmp	.+8      	; 0x6a <__do_clear_bss+0x8>

00000062 <__do_clear_bss>:
  62:	1d 92       	st	X+, r1
  64:	a2 17       	cp	r26, r18
  66:	b3 07       	cpc	r27, r19
  68:	e1 f7       	brne	.-8      	; 0x62 <__do_clear_bss>
  6a:	ec 32       	cpi	r30, 0x2C	; 44
  6c:	f4 07       	cpc	r31, r20
  6e:	31 f7       	brne	.-52     	; 0x3c <__do_copy_data+0x8>
  70:	03 d0       	rcall	.+6      	; 0x78 <_etext>
  72:	83 c1       	rjmp	.+774    	; 0x37a <exit>

00000074 <_exit>:
  74:	f8 94       	cli

00000076 <__stop_program>:
  76:	ff cf       	rjmp	.-2      	; 0x76 <__stop_program>

Disassembly of section .text:

00000388 <__bad_interrupt>:
 388:	3b ce       	rjmp	.-906    	; 0x0 <__vectors>

Disassembly of section .text.adc_setup:

00000356 <adc_setup>:
//PB5 RESET


void adc_setup(void) {
    // Set the ADC input to PB2/ADC1
    ADMUX |= (1 << MUX0);
 356:	87 b1       	in	r24, 0x07	; 7
 358:	81 60       	ori	r24, 0x01	; 1
 35a:	87 b9       	out	0x07, r24	; 7
    ADMUX |= (1 << ADLAR);
 35c:	87 b1       	in	r24, 0x07	; 7
 35e:	80 62       	ori	r24, 0x20	; 32
 360:	87 b9       	out	0x07, r24	; 7
    // Set the prescaler to clock/128 & enable ADC
    ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) | (1 << ADEN);
 362:	86 b1       	in	r24, 0x06	; 6
 364:	86 68       	ori	r24, 0x86	; 134
 366:	86 b9       	out	0x06, r24	; 6
 368:	08 95       	ret

Disassembly of section .text.adc_read:

0000036a <adc_read>:
}

int adc_read(void) {
    // Start the conversion
    ADCSRA |= (1 << ADSC);
 36a:	86 b1       	in	r24, 0x06	; 6
 36c:	80 64       	ori	r24, 0x40	; 64
 36e:	86 b9       	out	0x06, r24	; 6
    // Wait for it to finish 
    while (ADCSRA & (1 << ADSC));
 370:	36 99       	sbic	0x06, 6	; 6
 372:	fe cf       	rjmp	.-4      	; 0x370 <adc_read+0x6>
    return ADCH;
 374:	85 b1       	in	r24, 0x05	; 5
}
 376:	90 e0       	ldi	r25, 0x00	; 0
 378:	08 95       	ret

Disassembly of section .text.main:

00000078 <main>:
unsigned short int counter_flag = 5000;


int main(void) {

    ignition_on = 0;
  78:	10 92 64 00 	sts	0x0064, r1	; 0x800064 <ignition_on>
  7c:	10 92 65 00 	sts	0x0065, r1	; 0x800065 <ignition_on+0x1>
  80:	10 92 66 00 	sts	0x0066, r1	; 0x800066 <ignition_on+0x2>
  84:	10 92 67 00 	sts	0x0067, r1	; 0x800067 <ignition_on+0x3>
    PORTB = 0x00;
  88:	18 ba       	out	0x18, r1	; 24
    DDRB = 0x0A; // SALIDAS PORTB3 (LED) Y PORTB1 CONMUTACION VOLTAJE
  8a:	8a e0       	ldi	r24, 0x0A	; 10
  8c:	87 bb       	out	0x17, r24	; 23
    adc_setup();
  8e:	63 d1       	rcall	.+710    	; 0x356 <adc_setup>
	  
    while (1) //CICLO INFINITO DE PROGRAMA
    {
        in_ignition = (PINB & 0X01);
  90:	86 b3       	in	r24, 0x16	; 22
  92:	81 70       	andi	r24, 0x01	; 1
  94:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <in_ignition>
  98:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <in_ignition+0x1>

        while (adc_read() < 32 || (in_ignition == 1)) // VOLTAJE SUPERIOR A REFERENCIO Y IGNICION ACTIVA PARA SEGUIR 
  9c:	12 c0       	rjmp	.+36     	; 0xc2 <__stack+0x23>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  9e:	2f ef       	ldi	r18, 0xFF	; 255
  a0:	39 ec       	ldi	r19, 0xC9	; 201
  a2:	88 e0       	ldi	r24, 0x08	; 8
  a4:	21 50       	subi	r18, 0x01	; 1
  a6:	30 40       	sbci	r19, 0x00	; 0
  a8:	80 40       	sbci	r24, 0x00	; 0
  aa:	e1 f7       	brne	.-8      	; 0xa4 <__stack+0x5>
  ac:	00 c0       	rjmp	.+0      	; 0xae <__stack+0xf>
  ae:	00 00       	nop
        {
          _delay_ms(300);
		  in_ignition = (PINB & 0X01);
  b0:	86 b3       	in	r24, 0x16	; 22
  b2:	81 70       	andi	r24, 0x01	; 1
  b4:	80 93 76 00 	sts	0x0076, r24	; 0x800076 <in_ignition>
  b8:	10 92 77 00 	sts	0x0077, r1	; 0x800077 <in_ignition+0x1>
		  PORTB &= ~(1 << VOLT_OUT);
  bc:	88 b3       	in	r24, 0x18	; 24
  be:	8d 7f       	andi	r24, 0xFD	; 253
  c0:	88 bb       	out	0x18, r24	; 24
	  
    while (1) //CICLO INFINITO DE PROGRAMA
    {
        in_ignition = (PINB & 0X01);

        while (adc_read() < 32 || (in_ignition == 1)) // VOLTAJE SUPERIOR A REFERENCIO Y IGNICION ACTIVA PARA SEGUIR 
  c2:	53 d1       	rcall	.+678    	; 0x36a <adc_read>
  c4:	80 97       	sbiw	r24, 0x20	; 32
  c6:	5c f3       	brlt	.-42     	; 0x9e <main+0x26>
  c8:	80 91 76 00 	lds	r24, 0x0076	; 0x800076 <in_ignition>
  cc:	90 91 77 00 	lds	r25, 0x0077	; 0x800077 <in_ignition+0x1>
  d0:	01 97       	sbiw	r24, 0x01	; 1
  d2:	29 f3       	breq	.-54     	; 0x9e <main+0x26>
          _delay_ms(300);
		  in_ignition = (PINB & 0X01);
		  PORTB &= ~(1 << VOLT_OUT);
	    }

        ignition_on = TIME;    //UN MINUTOS
  d4:	88 ec       	ldi	r24, 0xC8	; 200
  d6:	9f ea       	ldi	r25, 0xAF	; 175
  d8:	a0 e0       	ldi	r26, 0x00	; 0
  da:	b0 e0       	ldi	r27, 0x00	; 0
  dc:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ignition_on>
  e0:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ignition_on+0x1>
  e4:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <ignition_on+0x2>
  e8:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <ignition_on+0x3>
        ignition_off = REST;  //5 SEGUNDOS
  ec:	80 ec       	ldi	r24, 0xC0	; 192
  ee:	95 e6       	ldi	r25, 0x65	; 101
  f0:	a2 e5       	ldi	r26, 0x52	; 82
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
  f8:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
  fc:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 100:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
        timeout_off = TIME;   // 5 SEGUNDOS
 104:	88 ec       	ldi	r24, 0xC8	; 200
 106:	9f ea       	ldi	r25, 0xAF	; 175
 108:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <timeout_off+0x1>
 10c:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <timeout_off>

		while (timeout_off >= 1)
 110:	14 c1       	rjmp	.+552    	; 0x33a <__stack+0x29b>
		{		

	if (!PORTB & (1 << VOLT_OUT))
 112:	88 b3       	in	r24, 0x18	; 24
		{
			counter_flag = 0x00;
			time_alive = TIME_PULSOS;
			time_read_pin = TIME_PWM;
		}
			time_alive--;
 114:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <time_alive>
 118:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <time_alive+0x1>
 11c:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <time_alive+0x2>
 120:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <time_alive+0x3>
 124:	01 97       	sbiw	r24, 0x01	; 1
 126:	a1 09       	sbc	r26, r1
 128:	b1 09       	sbc	r27, r1
 12a:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <time_alive>
 12e:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <time_alive+0x1>
 132:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <time_alive+0x2>
 136:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <time_alive+0x3>
			time_read_pin--;
 13a:	40 91 68 00 	lds	r20, 0x0068	; 0x800068 <time_read_pin>
 13e:	50 91 69 00 	lds	r21, 0x0069	; 0x800069 <time_read_pin+0x1>
 142:	60 91 6a 00 	lds	r22, 0x006A	; 0x80006a <time_read_pin+0x2>
 146:	70 91 6b 00 	lds	r23, 0x006B	; 0x80006b <time_read_pin+0x3>
 14a:	41 50       	subi	r20, 0x01	; 1
 14c:	51 09       	sbc	r21, r1
 14e:	61 09       	sbc	r22, r1
 150:	71 09       	sbc	r23, r1
 152:	40 93 68 00 	sts	0x0068, r20	; 0x800068 <time_read_pin>
 156:	50 93 69 00 	sts	0x0069, r21	; 0x800069 <time_read_pin+0x1>
 15a:	60 93 6a 00 	sts	0x006A, r22	; 0x80006a <time_read_pin+0x2>
 15e:	70 93 6b 00 	sts	0x006B, r23	; 0x80006b <time_read_pin+0x3>
			if (time_read_pin == 0)
 162:	45 2b       	or	r20, r21
 164:	46 2b       	or	r20, r22
 166:	47 2b       	or	r20, r23
 168:	69 f5       	brne	.+90     	; 0x1c4 <__stack+0x125>
			{
				pin_vida_old = pin_vida;
 16a:	40 91 74 00 	lds	r20, 0x0074	; 0x800074 <pin_vida>
 16e:	50 91 75 00 	lds	r21, 0x0075	; 0x800075 <pin_vida+0x1>
 172:	50 93 73 00 	sts	0x0073, r21	; 0x800073 <pin_vida_old+0x1>
 176:	40 93 72 00 	sts	0x0072, r20	; 0x800072 <pin_vida_old>
				pin_vida = (PINB & 0X10);
 17a:	26 b3       	in	r18, 0x16	; 22
 17c:	20 71       	andi	r18, 0x10	; 16
 17e:	30 e0       	ldi	r19, 0x00	; 0
 180:	30 93 75 00 	sts	0x0075, r19	; 0x800075 <pin_vida+0x1>
 184:	20 93 74 00 	sts	0x0074, r18	; 0x800074 <pin_vida>
				time_read_pin = TIME_PWM;
 188:	0f 2e       	mov	r0, r31
 18a:	f2 e3       	ldi	r31, 0x32	; 50
 18c:	cf 2e       	mov	r12, r31
 18e:	d1 2c       	mov	r13, r1
 190:	e1 2c       	mov	r14, r1
 192:	f1 2c       	mov	r15, r1
 194:	f0 2d       	mov	r31, r0
 196:	c0 92 68 00 	sts	0x0068, r12	; 0x800068 <time_read_pin>
 19a:	d0 92 69 00 	sts	0x0069, r13	; 0x800069 <time_read_pin+0x1>
 19e:	e0 92 6a 00 	sts	0x006A, r14	; 0x80006a <time_read_pin+0x2>
 1a2:	f0 92 6b 00 	sts	0x006B, r15	; 0x80006b <time_read_pin+0x3>
				if ((pin_vida_old == 0x00) && (pin_vida == 0x10))
 1a6:	45 2b       	or	r20, r21
 1a8:	69 f4       	brne	.+26     	; 0x1c4 <__stack+0x125>
 1aa:	20 31       	cpi	r18, 0x10	; 16
 1ac:	31 05       	cpc	r19, r1
 1ae:	51 f4       	brne	.+20     	; 0x1c4 <__stack+0x125>
					{
						counter_flag++;
 1b0:	20 91 70 00 	lds	r18, 0x0070	; 0x800070 <counter_flag>
 1b4:	30 91 71 00 	lds	r19, 0x0071	; 0x800071 <counter_flag+0x1>
 1b8:	2f 5f       	subi	r18, 0xFF	; 255
 1ba:	3f 4f       	sbci	r19, 0xFF	; 255
 1bc:	30 93 71 00 	sts	0x0071, r19	; 0x800071 <counter_flag+0x1>
 1c0:	20 93 70 00 	sts	0x0070, r18	; 0x800070 <counter_flag>
					}
			}
		
			if (time_alive == 0)
 1c4:	89 2b       	or	r24, r25
 1c6:	8a 2b       	or	r24, r26
 1c8:	8b 2b       	or	r24, r27
 1ca:	91 f5       	brne	.+100    	; 0x230 <__stack+0x191>
			{
				time_alive = TIME_PULSOS;
 1cc:	80 e8       	ldi	r24, 0x80	; 128
 1ce:	95 ef       	ldi	r25, 0xF5	; 245
 1d0:	a0 e2       	ldi	r26, 0x20	; 32
 1d2:	b0 e0       	ldi	r27, 0x00	; 0
 1d4:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <time_alive>
 1d8:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <time_alive+0x1>
 1dc:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <time_alive+0x2>
 1e0:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <time_alive+0x3>
				if (counter_flag > 7000)// definir cual es el tope de pulsos
 1e4:	80 91 70 00 	lds	r24, 0x0070	; 0x800070 <counter_flag>
 1e8:	90 91 71 00 	lds	r25, 0x0071	; 0x800071 <counter_flag+0x1>
 1ec:	89 35       	cpi	r24, 0x59	; 89
 1ee:	9b 41       	sbci	r25, 0x1B	; 27
 1f0:	40 f0       	brcs	.+16     	; 0x202 <__stack+0x163>
				{
					counter_flag = 0;
 1f2:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter_flag+0x1>
 1f6:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <counter_flag>
					PORTB |= (1 << VOLT_OUT);
 1fa:	88 b3       	in	r24, 0x18	; 24
 1fc:	82 60       	ori	r24, 0x02	; 2
 1fe:	88 bb       	out	0x18, r24	; 24
 200:	17 c0       	rjmp	.+46     	; 0x230 <__stack+0x191>
				}
				else
				{
				PORTB &= ~(1 << VOLT_OUT);
 202:	88 b3       	in	r24, 0x18	; 24
 204:	8d 7f       	andi	r24, 0xFD	; 253
 206:	88 bb       	out	0x18, r24	; 24
 208:	3f ef       	ldi	r19, 0xFF	; 255
 20a:	87 ef       	ldi	r24, 0xF7	; 247
 20c:	94 e2       	ldi	r25, 0x24	; 36
 20e:	21 e0       	ldi	r18, 0x01	; 1
 210:	31 50       	subi	r19, 0x01	; 1
 212:	80 40       	sbci	r24, 0x00	; 0
 214:	90 40       	sbci	r25, 0x00	; 0
 216:	20 40       	sbci	r18, 0x00	; 0
 218:	d9 f7       	brne	.-10     	; 0x210 <__stack+0x171>
 21a:	00 c0       	rjmp	.+0      	; 0x21c <__stack+0x17d>
 21c:	00 00       	nop
				_delay_ms(12000);
				if (PORTB & (1 << LED_IGN)) 
 21e:	c3 9b       	sbis	0x18, 3	; 24
 220:	03 c0       	rjmp	.+6      	; 0x228 <__stack+0x189>
				{
				PORTB |= (1 << VOLT_OUT);
 222:	88 b3       	in	r24, 0x18	; 24
 224:	82 60       	ori	r24, 0x02	; 2
 226:	88 bb       	out	0x18, r24	; 24
				}
				counter_flag = 0x00;
 228:	10 92 71 00 	sts	0x0071, r1	; 0x800071 <counter_flag+0x1>
 22c:	10 92 70 00 	sts	0x0070, r1	; 0x800070 <counter_flag>
				}
			}		
					
            read = adc_read(); // ACTUALIZA NUEVO VALOR DE LECTURA
 230:	9c d0       	rcall	.+312    	; 0x36a <adc_read>
 232:	90 93 79 00 	sts	0x0079, r25	; 0x800079 <read+0x1>
 236:	80 93 78 00 	sts	0x0078, r24	; 0x800078 <read>
						
            if (read > 32)  // SI EL ESTADO ACTUAL Y EL ANTERIOR SON MAYORES A LA REFERENCIA ACTUALIZA TIMEOUT //30
 23a:	81 97       	sbiw	r24, 0x21	; 33
 23c:	08 f4       	brcc	.+2      	; 0x240 <__stack+0x1a1>
 23e:	74 c0       	rjmp	.+232    	; 0x328 <__stack+0x289>
            {
                in_ignition = (PINB & 0X01);
 240:	86 b3       	in	r24, 0x16	; 22
 242:	81 70       	andi	r24, 0x01	; 1
 244:	c8 2f       	mov	r28, r24
 246:	30 e0       	ldi	r19, 0x00	; 0
 248:	d3 2f       	mov	r29, r19
 24a:	d0 93 77 00 	sts	0x0077, r29	; 0x800077 <in_ignition+0x1>
 24e:	c0 93 76 00 	sts	0x0076, r28	; 0x800076 <in_ignition>
		
                if (in_ignition == 1) // SI IGNITION ESTA ACTIVA VERIFICA QUE PERMANEZCA ACTIVA POR 5 SEGUNDOS 
 252:	21 97       	sbiw	r28, 0x01	; 1
 254:	f1 f5       	brne	.+124    	; 0x2d2 <__stack+0x233>
                {
                    ignition_on = TIME; //BORRAR
 256:	88 ec       	ldi	r24, 0xC8	; 200
 258:	9f ea       	ldi	r25, 0xAF	; 175
 25a:	a0 e0       	ldi	r26, 0x00	; 0
 25c:	b0 e0       	ldi	r27, 0x00	; 0
 25e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ignition_on>
 262:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ignition_on+0x1>
 266:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <ignition_on+0x2>
 26a:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <ignition_on+0x3>
					if (ignition_off < 5355000)
 26e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 272:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 276:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 27a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 27e:	88 3f       	cpi	r24, 0xF8	; 248
 280:	95 4b       	sbci	r25, 0xB5	; 181
 282:	a1 45       	sbci	r26, 0x51	; 81
 284:	b1 05       	cpc	r27, r1
 286:	18 f4       	brcc	.+6      	; 0x28e <__stack+0x1ef>
                    {
						PORTB &= ~(1 << LED_IGN);
 288:	88 b3       	in	r24, 0x18	; 24
 28a:	87 7f       	andi	r24, 0xF7	; 247
 28c:	88 bb       	out	0x18, r24	; 24
                    }
					if (ignition_off == 0) 
 28e:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <_edata>
 292:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <_edata+0x1>
 296:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <_edata+0x2>
 29a:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <_edata+0x3>
 29e:	00 97       	sbiw	r24, 0x00	; 0
 2a0:	a1 05       	cpc	r26, r1
 2a2:	b1 05       	cpc	r27, r1
 2a4:	51 f4       	brne	.+20     	; 0x2ba <__stack+0x21b>
                    {
                        timeout_off = TIME;
 2a6:	88 ec       	ldi	r24, 0xC8	; 200
 2a8:	9f ea       	ldi	r25, 0xAF	; 175
 2aa:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <timeout_off+0x1>
 2ae:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <timeout_off>
						PORTB &= ~(1 << VOLT_OUT);
 2b2:	88 b3       	in	r24, 0x18	; 24
 2b4:	8d 7f       	andi	r24, 0xFD	; 253
 2b6:	88 bb       	out	0x18, r24	; 24
 2b8:	40 c0       	rjmp	.+128    	; 0x33a <__stack+0x29b>
                    }
                    else 
                    {
						ignition_off--;
 2ba:	01 97       	sbiw	r24, 0x01	; 1
 2bc:	a1 09       	sbc	r26, r1
 2be:	b1 09       	sbc	r27, r1
 2c0:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 2c4:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 2c8:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 2cc:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
 2d0:	34 c0       	rjmp	.+104    	; 0x33a <__stack+0x29b>
                    }
                }
                else 
                {
					ignition_off = REST;
 2d2:	80 ec       	ldi	r24, 0xC0	; 192
 2d4:	95 e6       	ldi	r25, 0x65	; 101
 2d6:	a2 e5       	ldi	r26, 0x52	; 82
 2d8:	b0 e0       	ldi	r27, 0x00	; 0
 2da:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <_edata>
 2de:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <_edata+0x1>
 2e2:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <_edata+0x2>
 2e6:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <_edata+0x3>
					if (ignition_on == 0)
 2ea:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <ignition_on>
 2ee:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <ignition_on+0x1>
 2f2:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <ignition_on+0x2>
 2f6:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <ignition_on+0x3>
 2fa:	00 97       	sbiw	r24, 0x00	; 0
 2fc:	a1 05       	cpc	r26, r1
 2fe:	b1 05       	cpc	r27, r1
 300:	39 f4       	brne	.+14     	; 0x310 <__stack+0x271>
                    {
						PORTB |= (1 << LED_IGN);
 302:	88 b3       	in	r24, 0x18	; 24
 304:	88 60       	ori	r24, 0x08	; 8
 306:	88 bb       	out	0x18, r24	; 24
						PORTB |= (1 << VOLT_OUT);
 308:	88 b3       	in	r24, 0x18	; 24
 30a:	82 60       	ori	r24, 0x02	; 2
 30c:	88 bb       	out	0x18, r24	; 24
 30e:	15 c0       	rjmp	.+42     	; 0x33a <__stack+0x29b>
						//_delay_ms(50000);				
                    }
                    else
                    {
						ignition_on--;
 310:	01 97       	sbiw	r24, 0x01	; 1
 312:	a1 09       	sbc	r26, r1
 314:	b1 09       	sbc	r27, r1
 316:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <ignition_on>
 31a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <ignition_on+0x1>
 31e:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <ignition_on+0x2>
 322:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <ignition_on+0x3>
 326:	09 c0       	rjmp	.+18     	; 0x33a <__stack+0x29b>
                    }
                }
            }
            else
            {
                timeout_off--;
 328:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <timeout_off>
 32c:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <timeout_off+0x1>
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	90 93 7b 00 	sts	0x007B, r25	; 0x80007b <timeout_off+0x1>
 336:	80 93 7a 00 	sts	0x007A, r24	; 0x80007a <timeout_off>

        ignition_on = TIME;    //UN MINUTOS
        ignition_off = REST;  //5 SEGUNDOS
        timeout_off = TIME;   // 5 SEGUNDOS

		while (timeout_off >= 1)
 33a:	80 91 7a 00 	lds	r24, 0x007A	; 0x80007a <timeout_off>
 33e:	90 91 7b 00 	lds	r25, 0x007B	; 0x80007b <timeout_off+0x1>
 342:	89 2b       	or	r24, r25
 344:	09 f0       	breq	.+2      	; 0x348 <__stack+0x2a9>
 346:	e5 ce       	rjmp	.-566    	; 0x112 <__stack+0x73>
            else
            {
                timeout_off--;
            }
        }
        PORTB &= ~(1 << LED_IGN);
 348:	88 b3       	in	r24, 0x18	; 24
 34a:	87 7f       	andi	r24, 0xF7	; 247
 34c:	88 bb       	out	0x18, r24	; 24
        PORTB &= ~(1 << VOLT_OUT);
 34e:	88 b3       	in	r24, 0x18	; 24
 350:	8d 7f       	andi	r24, 0xFD	; 253
 352:	88 bb       	out	0x18, r24	; 24
    }
 354:	9d ce       	rjmp	.-710    	; 0x90 <main+0x18>

Disassembly of section .text.__dummy_fini:

0000038a <_fini>:
 38a:	08 95       	ret

Disassembly of section .text.__dummy_funcs_on_exit:

0000038c <__funcs_on_exit>:
 38c:	08 95       	ret

Disassembly of section .text.__dummy_simulator_exit:

0000038e <__simulator_exit>:
 38e:	08 95       	ret

Disassembly of section .text.exit:

0000037a <exit>:
 37a:	ec 01       	movw	r28, r24
 37c:	07 d0       	rcall	.+14     	; 0x38c <__funcs_on_exit>
 37e:	05 d0       	rcall	.+10     	; 0x38a <_fini>
 380:	ce 01       	movw	r24, r28
 382:	05 d0       	rcall	.+10     	; 0x38e <__simulator_exit>
 384:	ce 01       	movw	r24, r28
 386:	04 d0       	rcall	.+8      	; 0x390 <_Exit>

Disassembly of section .text._Exit:

00000390 <_Exit>:
 390:	71 de       	rcall	.-798    	; 0x74 <_exit>
