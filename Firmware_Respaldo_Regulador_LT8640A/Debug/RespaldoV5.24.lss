
RespaldoV5.24.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000248  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000004  00800060  00000248  000002dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000c  00800064  00800064  000002e0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002e0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000310  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000030  00000000  00000000  0000034c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   0000058a  00000000  00000000  0000037c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000003df  00000000  00000000  00000906  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   0000031b  00000000  00000000  00000ce5  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000044  00000000  00000000  00001000  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000002ca  00000000  00000000  00001044  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000120  00000000  00000000  0000130e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000020  00000000  00000000  0000142e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	21 c0       	rjmp	.+66     	; 0x46 <__bad_interrupt>
   4:	20 c0       	rjmp	.+64     	; 0x46 <__bad_interrupt>
   6:	1f c0       	rjmp	.+62     	; 0x46 <__bad_interrupt>
   8:	1e c0       	rjmp	.+60     	; 0x46 <__bad_interrupt>
   a:	1d c0       	rjmp	.+58     	; 0x46 <__bad_interrupt>
   c:	1c c0       	rjmp	.+56     	; 0x46 <__bad_interrupt>
   e:	1b c0       	rjmp	.+54     	; 0x46 <__bad_interrupt>
  10:	1a c0       	rjmp	.+52     	; 0x46 <__bad_interrupt>
  12:	19 c0       	rjmp	.+50     	; 0x46 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61

0000001c <__do_copy_data>:
  1c:	10 e0       	ldi	r17, 0x00	; 0
  1e:	a0 e6       	ldi	r26, 0x60	; 96
  20:	b0 e0       	ldi	r27, 0x00	; 0
  22:	e8 e4       	ldi	r30, 0x48	; 72
  24:	f2 e0       	ldi	r31, 0x02	; 2
  26:	02 c0       	rjmp	.+4      	; 0x2c <__do_copy_data+0x10>
  28:	05 90       	lpm	r0, Z+
  2a:	0d 92       	st	X+, r0
  2c:	a4 36       	cpi	r26, 0x64	; 100
  2e:	b1 07       	cpc	r27, r17
  30:	d9 f7       	brne	.-10     	; 0x28 <__do_copy_data+0xc>

00000032 <__do_clear_bss>:
  32:	20 e0       	ldi	r18, 0x00	; 0
  34:	a4 e6       	ldi	r26, 0x64	; 100
  36:	b0 e0       	ldi	r27, 0x00	; 0
  38:	01 c0       	rjmp	.+2      	; 0x3c <.do_clear_bss_start>

0000003a <.do_clear_bss_loop>:
  3a:	1d 92       	st	X+, r1

0000003c <.do_clear_bss_start>:
  3c:	a0 37       	cpi	r26, 0x70	; 112
  3e:	b2 07       	cpc	r27, r18
  40:	e1 f7       	brne	.-8      	; 0x3a <.do_clear_bss_loop>
  42:	0e d0       	rcall	.+28     	; 0x60 <main>
  44:	ff c0       	rjmp	.+510    	; 0x244 <_exit>

00000046 <__bad_interrupt>:
  46:	dc cf       	rjmp	.-72     	; 0x0 <__vectors>

00000048 <adc_setup>:


void adc_setup (void)
{
	// Set the ADC input to PB2/ADC1
	ADMUX |= (1 << MUX0);
  48:	38 9a       	sbi	0x07, 0	; 7
	ADMUX |= (1 << ADLAR);
  4a:	3d 9a       	sbi	0x07, 5	; 7

	// Set the prescaler to clock/128 & enable ADC
	ADCSRA |= (1 << ADPS2) | (1 << ADPS1) | (0 << ADPS0) | (1 << ADEN);
  4c:	86 b1       	in	r24, 0x06	; 6
  4e:	86 68       	ori	r24, 0x86	; 134
  50:	86 b9       	out	0x06, r24	; 6
  52:	08 95       	ret

00000054 <adc_read>:
}

int adc_read (void)
{
	// Start the conversion
	ADCSRA |= (1 << ADSC);
  54:	36 9a       	sbi	0x06, 6	; 6

	// Wait for it to finish
	while (ADCSRA & (1 << ADSC));
  56:	36 99       	sbic	0x06, 6	; 6
  58:	fe cf       	rjmp	.-4      	; 0x56 <adc_read+0x2>

	return ADCH;
  5a:	85 b1       	in	r24, 0x05	; 5
}
  5c:	90 e0       	ldi	r25, 0x00	; 0
  5e:	08 95       	ret

00000060 <main>:
long timeout_batt = 0;
long tiempo_inc = 0;

int main(void)
{
	PORTB = 0x00;  //bit 5 para regulador modem //10
  60:	18 ba       	out	0x18, r1	; 24
	DDRB =  0x1B;  // 3B
  62:	8b e1       	ldi	r24, 0x1B	; 27
  64:	87 bb       	out	0x17, r24	; 23
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  66:	2f ef       	ldi	r18, 0xFF	; 255
  68:	3b e4       	ldi	r19, 0x4B	; 75
  6a:	8d e1       	ldi	r24, 0x1D	; 29
  6c:	21 50       	subi	r18, 0x01	; 1
  6e:	30 40       	sbci	r19, 0x00	; 0
  70:	80 40       	sbci	r24, 0x00	; 0
  72:	e1 f7       	brne	.-8      	; 0x6c <main+0xc>
  74:	00 c0       	rjmp	.+0      	; 0x76 <main+0x16>
  76:	00 00       	nop
	_delay_ms (1000);	
	adc_setup();
  78:	e7 df       	rcall	.-50     	; 0x48 <adc_setup>
	PORTB =0x31;
  7a:	81 e3       	ldi	r24, 0x31	; 49
  7c:	88 bb       	out	0x18, r24	; 24
  7e:	9f ef       	ldi	r25, 0xFF	; 255
  80:	2b e4       	ldi	r18, 0x4B	; 75
  82:	3d e1       	ldi	r19, 0x1D	; 29
  84:	91 50       	subi	r25, 0x01	; 1
  86:	20 40       	sbci	r18, 0x00	; 0
  88:	30 40       	sbci	r19, 0x00	; 0
  8a:	e1 f7       	brne	.-8      	; 0x84 <main+0x24>
  8c:	00 c0       	rjmp	.+0      	; 0x8e <main+0x2e>
  8e:	00 00       	nop
	_delay_ms (1000);
	PORTB =0x30;
  90:	90 e3       	ldi	r25, 0x30	; 48
  92:	98 bb       	out	0x18, r25	; 24
  94:	9f ef       	ldi	r25, 0xFF	; 255
  96:	2b e4       	ldi	r18, 0x4B	; 75
  98:	3d e1       	ldi	r19, 0x1D	; 29
  9a:	91 50       	subi	r25, 0x01	; 1
  9c:	20 40       	sbci	r18, 0x00	; 0
  9e:	30 40       	sbci	r19, 0x00	; 0
  a0:	e1 f7       	brne	.-8      	; 0x9a <main+0x3a>
  a2:	00 c0       	rjmp	.+0      	; 0xa4 <__stack+0x5>
  a4:	00 00       	nop
	_delay_ms (1000);
	PORTB =0x31;
  a6:	88 bb       	out	0x18, r24	; 24
// 	PORTB =0x11;
// 	_delay_ms (1000);
	//PORTB =0x13;
 	//_delay_ms (500);
	//PORTB =0x13;
		timeout_off = TIME;
  a8:	0f 2e       	mov	r0, r31
  aa:	f0 ea       	ldi	r31, 0xA0	; 160
  ac:	7f 2e       	mov	r7, r31
  ae:	f0 2d       	mov	r31, r0
  b0:	0f 2e       	mov	r0, r31
  b2:	f6 e8       	ldi	r31, 0x86	; 134
  b4:	cf 2e       	mov	r12, r31
  b6:	f0 2d       	mov	r31, r0
  b8:	dd 24       	eor	r13, r13
  ba:	d3 94       	inc	r13
  bc:	e1 2c       	mov	r14, r1
			if ((read > 16) && (read_old > 16)) //31
			{
				timeout_off = TIME;
				if (timeout_batt == 0)
				{
					PORTB = 0x11; 
  be:	0f 2e       	mov	r0, r31
  c0:	f1 e1       	ldi	r31, 0x11	; 17
  c2:	ff 2e       	mov	r15, r31
  c4:	f0 2d       	mov	r31, r0
			}
			if (read <= 16)   //32
			{
				timeout_off --;
				timeout_batt = TIME_BAT;
				PORTB = 0x12;  ///12 
  c6:	0f 2e       	mov	r0, r31
  c8:	f2 e1       	ldi	r31, 0x12	; 18
  ca:	5f 2e       	mov	r5, r31
  cc:	f0 2d       	mov	r31, r0
			}		
		}

		// Conmuta la salida del módulo a alimentación con bateria
		PORTB = 0x1A; //1A
  ce:	0f 2e       	mov	r0, r31
  d0:	fa e1       	ldi	r31, 0x1A	; 26
  d2:	6f 2e       	mov	r6, r31
  d4:	f0 2d       	mov	r31, r0
				}
			}
			if (read <= 16)   //32
			{
				timeout_off --;
				timeout_batt = TIME_BAT;
  d6:	0f 2e       	mov	r0, r31
  d8:	f8 ee       	ldi	r31, 0xE8	; 232
  da:	8f 2e       	mov	r8, r31
  dc:	f3 e0       	ldi	r31, 0x03	; 3
  de:	9f 2e       	mov	r9, r31
  e0:	a1 2c       	mov	r10, r1
  e2:	b1 2c       	mov	r11, r1
  e4:	f0 2d       	mov	r31, r0
		{
			read_old = read;
			read = adc_read();
			if ((read > 16) && (read_old > 16)) //31
			{
				timeout_off = TIME;
  e6:	07 2d       	mov	r16, r7
  e8:	1c 2d       	mov	r17, r12
  ea:	dd 2d       	mov	r29, r13
  ec:	ce 2d       	mov	r28, r14
  ee:	01 c0       	rjmp	.+2      	; 0xf2 <__stack+0x53>
	{
		//PORTB = 0x11;
		//DDRB =  0x1B;
		while (adc_read() < 17)  //33
		{
			PORTB = 0x00;  //20
  f0:	18 ba       	out	0x18, r1	; 24
	
	while (1)
	{
		//PORTB = 0x11;
		//DDRB =  0x1B;
		while (adc_read() < 17)  //33
  f2:	b0 df       	rcall	.-160    	; 0x54 <adc_read>
  f4:	41 97       	sbiw	r24, 0x11	; 17
  f6:	e4 f3       	brlt	.-8      	; 0xf0 <__stack+0x51>
// 	PORTB =0x11;
// 	_delay_ms (1000);
	//PORTB =0x13;
 	//_delay_ms (500);
	//PORTB =0x13;
		timeout_off = TIME;
  f8:	70 92 60 00 	sts	0x0060, r7	; 0x800060 <__DATA_REGION_ORIGIN__>
  fc:	c0 92 61 00 	sts	0x0061, r12	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 100:	d0 92 62 00 	sts	0x0062, r13	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 104:	e0 92 63 00 	sts	0x0063, r14	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
		while(timeout_off >= 1)
 108:	78 c0       	rjmp	.+240    	; 0x1fa <__stack+0x15b>
		{
			read_old = read;
 10a:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <read>
 10e:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <read+0x1>
 112:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <read+0x2>
 116:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <read+0x3>
 11a:	80 93 68 00 	sts	0x0068, r24	; 0x800068 <read_old>
 11e:	90 93 69 00 	sts	0x0069, r25	; 0x800069 <read_old+0x1>
 122:	a0 93 6a 00 	sts	0x006A, r26	; 0x80006a <read_old+0x2>
 126:	b0 93 6b 00 	sts	0x006B, r27	; 0x80006b <read_old+0x3>
			read = adc_read();
 12a:	94 df       	rcall	.-216    	; 0x54 <adc_read>
 12c:	09 2e       	mov	r0, r25
 12e:	00 0c       	add	r0, r0
 130:	aa 0b       	sbc	r26, r26
 132:	bb 0b       	sbc	r27, r27
 134:	80 93 6c 00 	sts	0x006C, r24	; 0x80006c <read>
 138:	90 93 6d 00 	sts	0x006D, r25	; 0x80006d <read+0x1>
 13c:	a0 93 6e 00 	sts	0x006E, r26	; 0x80006e <read+0x2>
 140:	b0 93 6f 00 	sts	0x006F, r27	; 0x80006f <read+0x3>
			if ((read > 16) && (read_old > 16)) //31
 144:	41 97       	sbiw	r24, 0x11	; 17
 146:	a1 05       	cpc	r26, r1
 148:	b1 05       	cpc	r27, r1
 14a:	dc f1       	brlt	.+118    	; 0x1c2 <__stack+0x123>
 14c:	80 91 68 00 	lds	r24, 0x0068	; 0x800068 <read_old>
 150:	90 91 69 00 	lds	r25, 0x0069	; 0x800069 <read_old+0x1>
 154:	a0 91 6a 00 	lds	r26, 0x006A	; 0x80006a <read_old+0x2>
 158:	b0 91 6b 00 	lds	r27, 0x006B	; 0x80006b <read_old+0x3>
 15c:	41 97       	sbiw	r24, 0x11	; 17
 15e:	a1 05       	cpc	r26, r1
 160:	b1 05       	cpc	r27, r1
 162:	0c f4       	brge	.+2      	; 0x166 <__stack+0xc7>
 164:	4a c0       	rjmp	.+148    	; 0x1fa <__stack+0x15b>
			{
				timeout_off = TIME;
 166:	00 93 60 00 	sts	0x0060, r16	; 0x800060 <__DATA_REGION_ORIGIN__>
 16a:	10 93 61 00 	sts	0x0061, r17	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 16e:	d0 93 62 00 	sts	0x0062, r29	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 172:	c0 93 63 00 	sts	0x0063, r28	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
				if (timeout_batt == 0)
 176:	80 91 64 00 	lds	r24, 0x0064	; 0x800064 <__data_end>
 17a:	90 91 65 00 	lds	r25, 0x0065	; 0x800065 <__data_end+0x1>
 17e:	a0 91 66 00 	lds	r26, 0x0066	; 0x800066 <__data_end+0x2>
 182:	b0 91 67 00 	lds	r27, 0x0067	; 0x800067 <__data_end+0x3>
 186:	00 97       	sbiw	r24, 0x00	; 0
 188:	a1 05       	cpc	r26, r1
 18a:	b1 05       	cpc	r27, r1
 18c:	71 f4       	brne	.+28     	; 0x1aa <__stack+0x10b>
				{
					PORTB = 0x11; 
 18e:	f8 ba       	out	0x18, r15	; 24
				else
				{
					timeout_batt --;
				}
			}
			if (read <= 16)   //32
 190:	80 91 6c 00 	lds	r24, 0x006C	; 0x80006c <read>
 194:	90 91 6d 00 	lds	r25, 0x006D	; 0x80006d <read+0x1>
 198:	a0 91 6e 00 	lds	r26, 0x006E	; 0x80006e <read+0x2>
 19c:	b0 91 6f 00 	lds	r27, 0x006F	; 0x80006f <read+0x3>
 1a0:	41 97       	sbiw	r24, 0x11	; 17
 1a2:	a1 05       	cpc	r26, r1
 1a4:	b1 05       	cpc	r27, r1
 1a6:	4c f5       	brge	.+82     	; 0x1fa <__stack+0x15b>
 1a8:	0c c0       	rjmp	.+24     	; 0x1c2 <__stack+0x123>
				{
					PORTB = 0x11; 
				}
				else
				{
					timeout_batt --;
 1aa:	01 97       	sbiw	r24, 0x01	; 1
 1ac:	a1 09       	sbc	r26, r1
 1ae:	b1 09       	sbc	r27, r1
 1b0:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <__data_end>
 1b4:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <__data_end+0x1>
 1b8:	a0 93 66 00 	sts	0x0066, r26	; 0x800066 <__data_end+0x2>
 1bc:	b0 93 67 00 	sts	0x0067, r27	; 0x800067 <__data_end+0x3>
 1c0:	1c c0       	rjmp	.+56     	; 0x1fa <__stack+0x15b>
				}
			}
			if (read <= 16)   //32
			{
				timeout_off --;
 1c2:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1c6:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1ca:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1ce:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 1d2:	01 97       	sbiw	r24, 0x01	; 1
 1d4:	a1 09       	sbc	r26, r1
 1d6:	b1 09       	sbc	r27, r1
 1d8:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 1dc:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 1e0:	a0 93 62 00 	sts	0x0062, r26	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 1e4:	b0 93 63 00 	sts	0x0063, r27	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
				timeout_batt = TIME_BAT;
 1e8:	80 92 64 00 	sts	0x0064, r8	; 0x800064 <__data_end>
 1ec:	90 92 65 00 	sts	0x0065, r9	; 0x800065 <__data_end+0x1>
 1f0:	a0 92 66 00 	sts	0x0066, r10	; 0x800066 <__data_end+0x2>
 1f4:	b0 92 67 00 	sts	0x0067, r11	; 0x800067 <__data_end+0x3>
				PORTB = 0x12;  ///12 
 1f8:	58 ba       	out	0x18, r5	; 24
// 	_delay_ms (1000);
	//PORTB =0x13;
 	//_delay_ms (500);
	//PORTB =0x13;
		timeout_off = TIME;
		while(timeout_off >= 1)
 1fa:	80 91 60 00 	lds	r24, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 1fe:	90 91 61 00 	lds	r25, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 202:	a0 91 62 00 	lds	r26, 0x0062	; 0x800062 <__DATA_REGION_ORIGIN__+0x2>
 206:	b0 91 63 00 	lds	r27, 0x0063	; 0x800063 <__DATA_REGION_ORIGIN__+0x3>
 20a:	18 16       	cp	r1, r24
 20c:	19 06       	cpc	r1, r25
 20e:	1a 06       	cpc	r1, r26
 210:	1b 06       	cpc	r1, r27
 212:	0c f4       	brge	.+2      	; 0x216 <__stack+0x177>
 214:	7a cf       	rjmp	.-268    	; 0x10a <__stack+0x6b>
				PORTB = 0x12;  ///12 
			}		
		}

		// Conmuta la salida del módulo a alimentación con bateria
		PORTB = 0x1A; //1A
 216:	68 ba       	out	0x18, r6	; 24
 218:	8f ef       	ldi	r24, 0xFF	; 255
 21a:	95 e3       	ldi	r25, 0x35	; 53
 21c:	2e e6       	ldi	r18, 0x6E	; 110
 21e:	31 e0       	ldi	r19, 0x01	; 1
 220:	81 50       	subi	r24, 0x01	; 1
 222:	90 40       	sbci	r25, 0x00	; 0
 224:	20 40       	sbci	r18, 0x00	; 0
 226:	30 40       	sbci	r19, 0x00	; 0
 228:	d9 f7       	brne	.-10     	; 0x220 <__stack+0x181>
 22a:	00 c0       	rjmp	.+0      	; 0x22c <__stack+0x18d>
 22c:	00 00       	nop
		// Espera 15 Segundos
		_delay_ms(15000); //15000
		// Corta la salida.
		//PORTB = 0x20;  //apagar regulador modem ojo
		//DDRB =  0x1B; //Z8
		PORTB = 0x00; 
 22e:	18 ba       	out	0x18, r1	; 24
 230:	8f ef       	ldi	r24, 0xFF	; 255
 232:	97 e9       	ldi	r25, 0x97	; 151
 234:	2a e3       	ldi	r18, 0x3A	; 58
 236:	81 50       	subi	r24, 0x01	; 1
 238:	90 40       	sbci	r25, 0x00	; 0
 23a:	20 40       	sbci	r18, 0x00	; 0
 23c:	e1 f7       	brne	.-8      	; 0x236 <__stack+0x197>
 23e:	00 c0       	rjmp	.+0      	; 0x240 <__stack+0x1a1>
 240:	00 00       	nop
 242:	57 cf       	rjmp	.-338    	; 0xf2 <__stack+0x53>

00000244 <_exit>:
 244:	f8 94       	cli

00000246 <__stop_program>:
 246:	ff cf       	rjmp	.-2      	; 0x246 <__stop_program>
